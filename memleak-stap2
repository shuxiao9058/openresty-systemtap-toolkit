#!/usr/bin/env perl

use 5.006001;
use strict;
use warnings;

use Getopt::Long qw( GetOptions );

GetOptions("h",         \(my $help),
           "p=i",       \(my $pid))
    or die usage();

if ($help) {
    print usage();
    exit;
}

if (!defined $pid) {
    die "No process pid specified by the -p option.\n";
}

my $stap_args = " -DSTP_NO_OVERLOAD -DMAXACTION=50000 -DMAXMAPENTRIES=10000 -DMAXBACKTRACE=200 -DMAXSTRINGLEN=2048";


my $stap_src;
$stap_src = <<_EOC_;
global ptr2bt
global ptr2size
global used
global bt_stats
global wait
global quit

probe begin {
    printf("Start memory tracing...\\n")
}

probe process("/usr/lib64/libc-*.so").function("malloc").return {
    if (pid() == target()) {
        if (quit) {
            foreach (ptr in ptr2bt) {
                bt = ptr2bt[ptr]
                bt_stats[bt] += ptr2size[ptr]
            }

            foreach (bt in bt_stats+) {
                print_ustack(bt)
                printf("\\t%d\\n", bt_stats[bt])
            }

            delete ptr2bt
            delete ptr2size
            exit()
        } else if (!wait && used < 4096) {
            ptr = \$return
            ptr2bt[ptr] = ubacktrace()
            ptr2size[ptr] = \$bytes
            used++
        }
    }
}

probe process("/usr/lib64/libc-*.so").function("free") {
    if (pid() == target()) {
        ptr = \$mem
        if (ptr in ptr2bt) {
            delete ptr2bt[ptr]
            delete ptr2size[ptr]
            used--
        }
    }
}

probe timer.s(60) {
    if (!wait) {
        wait = 1
        printf("Wait for free memory...\\n")
    }
}

probe timer.s(90) {
    if (!quit) {
        quit = 1
        printf("Stop tracing memory...\\n")
    }
}
_EOC_


#print $stap_src;

my $d_so_args = '';

my %so_files;
{
	my $maps_file = "/proc/$pid/maps";
	open my $in, $maps_file
		or die "Cannot open $maps_file for reading: $!\n";

	while (<$in>) {
		if (/\s+(\/\S+\.so(?:\.\S+)?)$/) {
			if (!exists $so_files{$1}) {
				$so_files{$1} = 1;
				#warn $1, "\n";
			}
		}
	}

	close $in;
}

if (%so_files) {
	$d_so_args = join " ", map { "-d $_" } sort keys %so_files;
}

my $exec_file = "/proc/$pid/exe";
if (!-f $exec_file) {
	die "User process $pid is not running or ",
		"you do not have enough permissions.\n"
}
my $exec_path = readlink $exec_file;

open my $in, "|stap --skip-badvars --all-modules -x $pid -d '$exec_path' --ldd $d_so_args $stap_args -"
	or die "Cannot run stap: $!\n";

print $in $stap_src;

close $in;
	
sub usage {
    return <<'_EOC_';
Usage:
    osd-stap [optoins]

Options:
    -h                  Print this usage.
    -p <pid>            Specify the user process pid.

Examples:
    memleak-stap2 -p 12345
_EOC_
}
